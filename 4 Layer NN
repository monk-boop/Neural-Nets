import numpy as np

np.random.seed(1)

streetlights = np.array([
    [ 1, 0, 1 ],                          
    [ 0, 1, 1 ],                          
    [ 0, 0, 1 ],                          
    [ 1, 1, 1 ] 
    
])
walk_vs_stop = np.array([[ 1, 1, 0, 0]]).T

def relu(x):
    return (x>0)*1

def relu2deriv(output):
    return (output>0)

alpha = 1

weights_0_1 = 2*np.random.random((3,4))-1
weights_1_2 = 2*np.random.random((4,2)) - 1
weights_2_3 = 2*np.random.random((2,1))-1

for iteration in range(60):
    total_error = 0
    for i in range(len(streetlights)):
        layer_0 = streetlights[i:i+1] 
        layer_1 = relu(np.dot(layer_0,weights_0_1)) # 1x4 matrix
        layer_2 = relu(np.dot(layer_1,weights_1_2)) # 1x2 matrix
        layer_3 = np.dot(layer_2,weights_2_3) #1x1 output
        
        total_error +=np.sum((layer_3 - walk_vs_stop[i:i+1])**2)
        
        layer_3_delta = layer_3 - walk_vs_stop[i:i+1] #1x1 matrix
        layer_2_delta = layer_3_delta.dot(weights_2_3.T)*relu2deriv(layer_2) # 1x2 matrix
        layer_1_delta = layer_2_delta.dot(weights_1_2.T)*relu2deriv(layer_1) # 1x4 matrix
        
        weights_0_1 -= alpha*layer_0.T.dot(layer_1_delta)
        weights_1_2 -= alpha*layer_1.T.dot(layer_2_delta)
        weights_2_3 -= alpha*layer_2.T.dot(layer_3_delta)
    if (iteration%10 == 0):
        print("error:", str(total_error))
